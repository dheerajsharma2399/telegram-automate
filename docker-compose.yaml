# Coolify-Optimized Docker Compose - No Build Required
# Uses pre-built Python image and installs dependencies at runtime

version: '3.8'

services:
  telegram-bot:
    image: python:3.11-slim
    container_name: telegram-job-bot
    restart: unless-stopped
    command: python web_server.py
    environment:
      # Container type identification
      - CONTAINER_TYPE=${CONTAINER_TYPE:-bot}
      - SKIP_DB_WAIT=true
      
      # Database Configuration
      - DATABASE_PATH=/app/jobs.db
      
      # Telegram API Configuration
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - TELEGRAM_PHONE=${TELEGRAM_PHONE}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_GROUP_USERNAMES=${TELEGRAM_GROUP_USERNAMES}
      
      # Authorization
      - AUTHORIZED_USER_IDS=${AUTHORIZED_USER_IDS}
      - ADMIN_USER_ID=${ADMIN_USER_ID}
      
      # LLM Configuration
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_MODEL=${OPENROUTER_MODEL:-anthropic/claude-3.5-sonnet}
      - OPENROUTER_FALLBACK_MODEL=${OPENROUTER_FALLBACK_MODEL:-openai/gpt-4o-mini}
      
      # Processing Configuration
      - BATCH_SIZE=10
      - PROCESSING_INTERVAL_MINUTES=5
      - MAX_RETRIES=3
      
      # Google Sheets Configuration
      - GOOGLE_CREDENTIALS_JSON=${GOOGLE_CREDENTIALS_JSON}
      - SPREADSHEET_ID=${SPREADSHEET_ID}
      
      # Bot Configuration
      - BOT_RUN_MODE=polling
      
      # Flask Configuration (for web service)
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - PORT=8888
      
      # Python Environment
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    ports:
      - "8888:8888"
    volumes:
      - ./data:/app
    working_dir: /tmp
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'